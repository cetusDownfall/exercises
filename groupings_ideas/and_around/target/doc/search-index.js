var searchIndex = {};
searchIndex["and_around"] = {"doc":"","items":[[0,"buffer","and_around","Holds a revolving list of a fixed amount of reference counted items.",null,null],[3,"RoundList","and_around::buffer","A list of fixed length represented by a mutable slice of owned slices.",null,null],[11,"new","","Constructor, takes a size to keep as its max size.",0,{"inputs":[{"name":"usize"}],"output":{"name":"roundlist"}}],[11,"reset","","Resets the read and write positions, clears contents. Does not clear size.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"insert","","Inserts this item at the next index. Loops around once it hits the max size.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"get_list","","Returns a list with reference counted references to this list's contents.",0,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"vec"}}],[0,"group","and_around","Contains several structs for group management and record keeping. May be refactored later.",null,null],[3,"Student","and_around::group","A wrapper around a string. May be changed later.",null,null],[3,"Class","","A group of students. Owns its students.",null,null],[3,"Group","","A temporary group for record keeping, primarily. Weak references so as to allow classes to add and remove students later and still keep past groups with references valid.",null,null],[3,"GroupState","","A group of groups, owns references to them. Used almost entirely for record keeping.",null,null],[3,"History","","Contains a circular list of previous groupstates to keep track of student weight.",null,null],[3,"GroupManager","","Primary struct used for creating, storing, and distributing students among groups.",null,null],[11,"new","","Constructor. Takes a static string reference as an argument.",1,{"inputs":[{"name":"string"}],"output":{"name":"student"}}],[11,"name","","",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","Constructor. Takes a reference counted list of students (should have no other references to them.)",2,{"inputs":[{"generics":["rc"],"name":"vec"}],"output":{"name":"class"}}],[11,"get_students","","Returns a list of references to the students inside.",2,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"vec"}}],[11,"get_weak_students","","Returns a list of weak references to the students inside. Used primarily for record keeping.",2,{"inputs":[{"name":"self"}],"output":{"generics":["weak"],"name":"vec"}}],[11,"salt","","Shuffles the students in the class.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Constructor. Takes a max size.",3,{"inputs":[{"name":"usize"}],"output":{"name":"group"}}],[11,"try_add","","Adds a student but checks for capacity first. Returns a None if successful, Some(argument) otherwise.",3,{"inputs":[{"name":"self"},{"generics":["student"],"name":"rc"}],"output":{"generics":["rc"],"name":"option"}}],[11,"contains","","Checks if a reference in this grou",3,{"inputs":[{"name":"self"},{"generics":["student"],"name":"rc"}],"output":{"name":"bool"}}],[11,"remaining","","Returns remaining spots for students.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_students","","Lists students.",3,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"vec"}}],[11,"new","","Constructor. Takes nothing, returns an empty group state.",4,{"inputs":[],"output":{"name":"groupstate"}}],[11,"make_record","","",4,{"inputs":[{"name":"self"}],"output":{"name":"groupstate"}}],[11,"add_group","","Adds an already initialised group.",4,{"inputs":[{"name":"self"},{"generics":["group"],"name":"rc"}],"output":null}],[11,"add_new_group","","Adds an empty group. Avoid if possible.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"get_groups","","Returns a list of counted references to the contents of this struct.",4,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"vec"}}],[11,"has_both","","Returns only the groups which contain both of the students provided.",4,{"inputs":[{"name":"self"},{"generics":["student"],"name":"rc"},{"generics":["student"],"name":"rc"}],"output":{"generics":["rc"],"name":"vec"}}],[11,"new","","Constructor. Takes a max length of groupstates to keep track of.",5,{"inputs":[{"name":"usize"}],"output":{"name":"history"}}],[11,"get_weight","","Gets a \"bias number\" based off of the amount of times the students have been grouped together and how long ago it was.",5,{"inputs":[{"name":"self"},{"generics":["student"],"name":"rc"},{"generics":["student"],"name":"rc"}],"output":{"name":"u32"}}],[11,"insert","","Adds a new group state.",5,{"inputs":[{"name":"self"},{"generics":["groupstate"],"name":"rc"}],"output":null}],[11,"new","","Constructor. Takes a list of student references, preferably new. Also takes a length of group states to keep track of.",6,{"inputs":[{"generics":["rc"],"name":"vec"},{"name":"usize"}],"output":{"name":"groupmanager"}}],[11,"distribute","","Distribute students without bias. Simply pour them out into the number of groups provided, each with the size provided.",6,null],[11,"generate_groups","","",6,null],[11,"push_curr","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"show_curr","","Shows the current group state.",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}]],"paths":[[3,"RoundList"],[3,"Student"],[3,"Class"],[3,"Group"],[3,"GroupState"],[3,"History"],[3,"GroupManager"]]};
initSearch(searchIndex);
